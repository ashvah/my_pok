#! /usr/bin/python
#
# Generate deployment.h and Makefile according to the given configuration file.
# Run with --test to run unit tests.
#

import os
import re
import sys
import yaml

GENERATED_MSG = ["This file has been automatically generated by gen_deployment.",
                 "Do not make manual modifications there or they will be lost."]

def get_option(config, opt, decode = None, filter_none = False):
    """Return the value of an option, or None if absent. The option can be given
    as a "."-separated path (any non existing component will make it return None).
    If a list is encountered in the path, all values will be returned.
    An optional decoder can be called if the option exists, and None values can
    be filtered in lists.
    
    >>> config = {"target": {"arch": "x86", "bsp": "x86-qemu"},                \
                  "partitions": [{"name": "pr1", "threads": { "count": 5 }},   \
                                 {"name": "pr2", "threads": { "count": 3 }},   \
                                 {"name": "pr3"}],                             \
                  "kernel": {"stop_after": "37ms"}}
    >>> get_option(config, "kernel.stop_after", decode=to_ns)
    37000000
    >>> get_option(config, "kernel.scheduling_mode")
    >>> get_option(config, "partitions.threads.count", filter_none=True)
    [5, 3]
    >>> get_option(config, "partitions.name")
    ['pr1', 'pr2', 'pr3']
    """
    if type(config) == list:
        result = [get_option(e, opt, decode, filter_none) for e in config]
        return [e for e in result if e is not None] if filter_none else result
    words = opt.split(".", 1)
    result = config.get(words[0])
    if result is None:
        return None
    elif len(words) == 2:
        return get_option(result, words[1], decode, filter_none)
    elif decode is not None:
        return decode(result)
    return result

def get_option_or(config, opt, default, decode = None):
    """Replace missing values by the default value. See get_option() for parameters.
    >>> config = {"target": {"arch": "x86", "bsp": "x86-qemu"},                \
                  "partitions": [{"name": "pr1", "threads": { "count": 5 }},   \
                                 {"name": "pr2", "threads": { "count": 3 }},   \
                                 {"name": "pr3"}],                             \
                  "kernel": {"stop_after": "37ms"}}
    >>> get_option_or(config, "partitions.threads.count", 1)
    [5, 3, 1]
    """
    result = get_option(config, opt, decode=decode)
    if type(result) == list:
        return [default if r is None else r for r in result]
    return default if result is None else result

def option_value(config, opt, decode = None):
    """Same as get_option(), but throw an exception if the result is None.
    
    >>> config = {"target": {"arch": "x86", "bsp": "x86-qemu"},                \
                  "partitions": [{"name": "pr1", "threads": { "count": 5 }},   \
                                 {"name": "pr2", "threads": { "count": 3 }},   \
                                 {"name": "pr3"}],                             \
                  "kernel": {"stop_after": "37ms"}}
    >>> option_value(config, "partitions.name")
    ['pr1', 'pr2', 'pr3']
    >>> option_value(config, "kernel.stop_after", decode=to_ns)
    37000000
    >>> option_value(config, "kernel.scheduling_mode")
    Traceback (most recent call last):
    ...
    Exception: mandatory option value kernel.scheduling_mode is absent
    >>> option_value(config, "partitions.threads.count")
    Traceback (most recent call last):
    ...
    Exception: mandatory option value partitions.threads.count is absent
    """
    result = get_option(config, opt, decode=decode)
    if (type(result) == list and any(e is None for e in result)) or result is None:
        raise Exception("mandatory option value {} is absent".format(opt))
    return result

def sum_option(config, opt, decode = None):
    """Return the sum of all opt optons, filtering out None values.
    
    >>> config = {"partitions": [{"name": "pr1", "wcet": "13ms",  \
                                  "threads": {"count": 3}},       \
                                 {"name": "pr2", "wcet": "1s"},   \
                                 {"name": "pr3", "wcet": "100ms", \
                                  "threads": {"count": 5}}]}
    >>> sum_option(config, "partitions.threads.count")
    8
    >>> sum_option(config, "partitions.wcet", decode=to_ns)
    1113000000
    """
    return sum(get_option(config, opt, decode=decode, filter_none=True))

def has_feature(config, feature):
    """Check if a feature has been declared. A path can be given, see get_option()
    for more details.

    >>> config = {"partitions": [{"name": "pr1", "features": ["debug"],             \
                                  "threads": {"count": 2, "features": ["sleep"]}},  \
                                  {"name": "pr2", "features": [],                   \
                                  "threads": {"count": 3}},                         \
                                  {"name": "pr3", "features": ["debug"]}],          \
                  "kernel": {"features": ["exit"]}}
    >>> has_feature(config, "partitions.debug")
    [True, False, True]
    >>> has_feature(config, "partitions.threads.sleep")
    [True, False, False]
    >>> has_feature(config, "kernel.exit")
    True
    >>> has_feature(config, "kernel.debug")
    False
    >>> has_feature(config, "nonexistent.exit")
    False
    """
    words = feature.rsplit(".", 1)
    opts = get_option_or(config, ".".join(words[:-1] + ["features"]), [])
    if opts and type(opts[0]) == list:
        return [o != None and words[-1] in o for o in opts]
    return words[-1] in opts

def any_has_feature(config, feature):
    """Check if a feature is present at least one time."""
    return any(has_feature(config, feature))

TIME_RE = re.compile(r"(\d*\.?\d+)\s*([mµun]?s|m|h)")
TIME_MULT = {"ns": 1, "µs": 1e3, "us": 1e3, "ms": 1e6, "s": 1e9, "m": 60e9, "h": 3600e9}

def to_ns(value):
    """Convert a given value with a possible suffix to nanoseconds. Floating point values
    are supported.
    
    >>> to_ns(1000)
    1000
    >>> to_ns("1000")
    1000
    >>> to_ns("17ms")
    17000000
    >>> to_ns("17 µs")
    17000
    >>> to_ns("5 s")
    5000000000
    >>> to_ns("5.12ms")
    5120000
    >>> to_ns("1h")
    3600000000000
    """
    if type(value) == int:
        return value
    m = TIME_RE.match(value)
    if m:
        return int(float(m.group(1)) * TIME_MULT[m.group(2)])
    try: return int(value)
    except: raise Exception("illegal time value {}".format(value))

BYTES_RE = re.compile(r"(\d+)\s*([GMk]?)B?")
BYTES_MULT = {"g": 1024**3, "m": 1024**2, "k": 1024, "": 1}

def to_bytes(value):
    """Convert a given value with a possible suffix to bytes.

    >>> to_bytes("2k")
    2048
    >>> to_bytes(174)
    174
    >>> to_bytes("174")
    174
    >>> to_bytes("2MB")
    2097152
    """
    if type(value) == int:
        return value
    m = BYTES_RE.match(value)
    if m:
        return int(m.group(1)) * BYTES_MULT[m.group(2).lower()]
    try: return int(value)
    except: raise Exception("illegal bytes value {}".format(value))

def add(fd, msg = "", prefix = None):
    """Add one or several line (msg can be a string or a list) with an optional
    prefix."""
    msg = [msg] if type(msg) == str else msg
    prefix = "" if prefix is None else "{} ".format(prefix)
    for line in msg:
        fd.write("{}{}\n".format(prefix, line))

def format_affinity(l):
    res = 0
    for x in l:
        res+= 1<<x
    return res

def gen_main_makefile(fd, config, arch, bsp, pok_root):
    """Generate the main Makefile."""
    partitions = option_value(config, "partitions.name")
    add(fd, GENERATED_MSG, "#")

    add(fd,
        """
export POK_PATH=$(CURDIR)/{pok_root}
export ARCH={arch}
export BSP={bsp}

include $(POK_PATH)/misc/mk/config.mk
include $(POK_PATH)/misc/mk/common-$(ARCH).mk

TARGET=$(CURDIR)/pok.elf
ARCHIVE=$(CURDIR)/partitions.cpio
PARTITIONS={partitions_elf}
KERNEL=kernel/kernel.lo
PARTDIRS={partitions}
SUBDIRS=kernel $(PARTDIRS)

all: build-regular

build-regular: build-kernel partitions $(TARGET)

compiletest: all

build-kernel:
	$(CD) kernel && $(MAKE)

partitions:
	for d in $(PARTDIRS); do $(MAKE) -C $$d clean all || exit 1; done

clean: common-clean
	$(RM) node_impl
	for d in $(SUBDIRS); do $(MAKE) -C $$d clean || exit 1; done

distclean: clean
	for d in $(SUBDIRS); do $(MAKE) -C $$d distclean || exit 1; done

include $(POK_PATH)/misc/mk/rules-common.mk
include $(POK_PATH)/misc/mk/rules-main.mk
include $(POK_PATH)/misc/mk/install-rules.mk
""".format(arch=arch, bsp=bsp, partitions=" ".join(partitions),
           pok_root=pok_root,
           partitions_elf=" ".join("{}/{}.elf".format(p, p) for p in partitions)))

def gen_kernel_makefile(fd, config, arch, bsp, pok_root):
    """Generate the kernel Makefile."""
    add(fd, GENERATED_MSG, "#")

    add(fd, """
export POK_PATH=$(CURDIR)/../{pok_root}
export ARCH={arch}
export BSP={bsp}
export DEPLOYMENT_HEADER=$(CURDIR)/deployment.h

include $(POK_PATH)/misc/mk/config.mk

LO_TARGET = kernel.lo
LO_DEPS = pok.lo

all: kernel copy-kernel $(LO_TARGET)

.PHONY: clean distclean install all

clean: common-clean kernel-clean

include $(POK_PATH)/misc/mk/common-$(ARCH).mk
include $(POK_PATH)/misc/mk/rules-common.mk
include $(POK_PATH)/misc/mk/rules-kernel.mk
""".format(arch=arch, bsp=bsp, pok_root=pok_root))

def c_list(l, is_symbol = False):
    """Return a C list initializer, for integers or strings. Strings
    can also be forced as symbols.
    
    >>> c_list([1, 2, 3])
    '{1, 2, 3}'
    >>> c_list(["foo", "bar", "baz"])
    '{"foo", "bar", "baz"}'
    """
    if l and type(l[0]) == str and not is_symbol:
        l = ['"{}"'.format(e) for e in l]
    else:
        l = [str(e) for e in l]
    return "{{{}}}".format(", ".join(l))

def add_lists(lists):
    """Add same index elements of lists. Lists must have the same size.

    >>> add_lists([[1, 2, 3], [10, 20, 30], [100, 200, 300]])
    [111, 222, 333]
    """
    return [sum(l[i] for l in lists) for i in range(len(lists[0]))]

def gen_kernel_deployment_h(fd, config):
    """Generate the kernel deployment header."""
    add(fd, GENERATED_MSG, "//")

    guard = "__POK_KERNEL_GENERATED_DEPLOYMENT_H_"
    add(fd, ["", "#ifndef {}".format(guard),
             "#define {}".format(guard), ""])

    includes = set()
    needs = set()
    nb_processors = get_option_or(config, "target.nb_processors_number", 1)
    configs = {"NB_PROCESSORS": nb_processors,"NB_PARTITIONS": len(option_value(config, "partitions")),
               "NB_THREADS": sum_option(config, "partitions.threads.count") + nb_processors + 1}
    semaphores = get_option_or(config, "partitions.semaphores", 0)
    mutexes = get_option_or(config, "partitions.mutexes", 0)
    events = get_option_or(config, "partitions.events", 0)
    lockobjects = add_lists([semaphores, mutexes, events])
    if sum(lockobjects):
        needs.add("LOCKOBJECTS")
        configs["NB_LOCKOBJECTS"] =  sum(lockobjects)
    for (partopt, need) in [("console", "CONSOLE"), ("timer", "TIME"), ("assert", "DEBUG"),
                            ("assert", "SHUTDOWN"), ("shutdown", "SHUTDOWN"),
                            ("threads.sleep", "THREAD_SLEEP"), ("threads.suspend", "THREAD_SUSPEND")]:
        if any_has_feature(config, "partitions.{}".format(partopt)):
            needs.add(need)
    for (opt, need) in [("assert", "ASSERT"),("debug", "DEBUG")]:
        if has_feature(config, "kernel.{}".format(opt)):
            needs.add(need)
    configs["PARTITIONS_SIZE"] = c_list(option_value(config, "partitions.size", decode=to_bytes))
    partitions = option_value(config, "partitions.name")
    configs["PROGRAM_NAME"] = c_list(["{}/{}.elf".format(p, p) for p in partitions])
    configs["SCHEDULING_NBSLOTS"] = len(option_value(config, "kernel.scheduler.slots"))
    slots = option_value(config, "kernel.scheduler.slots.duration", decode=to_ns)
    major_frame = get_option_or(config, "kernel.scheduler.major_frame", decode=to_ns, default=sum(slots))
    configs["SCHEDULING_MAJOR_FRAME"] = major_frame
    if sum(slots) > major_frame:
        raise Exception("sum of slots times is greater than major frame")
    configs["SCHEDULING_SLOTS"] = c_list(slots)
    allocations = [partitions.index(n) for n in option_value(config, "kernel.scheduler.slots.partition")]
    configs["SCHEDULING_SLOTS_ALLOCATION"] = c_list(allocations)
    processor_affinity = [format_affinity(l) for l in get_option_or(config, "partitions.processor_affinity", [i for i in range(nb_processors)])]
    configs["PROCESSOR_AFFINITY"] = c_list(processor_affinity)
    configs["PARTITIONS_NTHREADS"] = c_list(get_option_or(config, "partitions.threads.count", 1))
    configs["PARTITIONS_NLOCKOBJECTS"] = c_list(lockobjects)
    schedulers = [v.upper() for v in get_option_or(config, "partitions.scheduler", "rr")]
    if any(scheduler not in ["RR", "RMS", "STATIC"] for scheduler in schedulers):
        raise Exception("only RR, STATIC and RMS schedulers are implemented right now")
    non_rr = set(scheduler for scheduler in schedulers if scheduler != "RR")
    if non_rr:
        for scheduler in non_rr:
            needs.add("SCHED_{}".format(scheduler))
        configs["PARTITIONS_SCHEDULER"] = c_list(["POK_SCHED_{}".format(v) for v in schedulers], is_symbol=True)
        includes.add("core/schedvalues.h")

    if includes:
        add(fd, ["#include <{}>".format(v) for v in sorted(includes)])
        add(fd)
    for (key, value) in sorted(configs.items()):
        add(fd, "#define POK_CONFIG_{} {}".format(key, value))
    add(fd)
    for need in sorted(needs):
        add(fd, "#define POK_NEEDS_{} 1".format(need))

    ids = ",\n".join("  pok_part_identifier_{} = {}".format(name, i) for (i, name) in enumerate(partitions))
    add(fd, ["", "typedef enum {", ids, "} pok_part_identifiers_t;"])

    ids = ",\n".join("  pok_part_id_{} = {}".format(name, i) for (i, name) in enumerate(partitions))
    add(fd, ["", "typedef enum {", ids, "} pok_part_id_t;", ""])

    add(fd, "typedef enum { pok_nodes_node1 = 0 } pok_node_id_t;")

    add(fd, ["", "#endif // {}".format(guard)])

def gen_partition_makefile(fd, config, arch, bsp, pok_root):
    """Generate a partition Makefile."""
    add(fd, GENERATED_MSG, "#")

    add(fd, """
export POK_PATH=$(CURDIR)/../{pok_root}
export ARCH={arch}
export BSP={bsp}
export DEPLOYMENT_HEADER=$(CURDIR)/deployment.h

include $(POK_PATH)/misc/mk/config.mk

TARGET = {name}.elf
OBJS = {objects}

all: libpok $(TARGET)

.PHONY: clean distclean install all

clean: common-clean libpok-clean

include $(POK_PATH)/misc/mk/common-$(ARCH).mk
include $(POK_PATH)/misc/mk/rules-common.mk
include $(POK_PATH)/misc/mk/rules-partition.mk
""".format(arch=arch, bsp=bsp, name=option_value(config, "name"),
               pok_root=pok_root,
               objects=" ".join(option_value(config, "objects"))))

def gen_partition_deployment_h(fd, config):
    """Generate the partition deployment header."""
    add(fd, GENERATED_MSG, "//")

    guard = "__POK_USER_GENERATED_DEPLOYMENT_H_"
    add(fd, ["", "#ifndef {}".format(guard),
             "#define {}".format(guard), ""])

    needs = set()
    for (opt, need) in [("assert", "ASSERT"), ("debug", "DEBUG"), ("console", "CONSOLE"), ("timer", "TIMER"),
                        ("libc", "LIBC_STDLIB"), ("shutdown", "SHUTDOWN")]:
        if has_feature(config, opt):
            needs.add(need)
    if get_option(config, "semaphores"): needs.add("SEMAPHORES")
    if get_option(config, "mutexes"): needs.add("MUTEXES")
    if get_option(config, "events"): needs.add("EVENTS")
    for need in sorted(needs):
        add(fd, "#define POK_NEEDS_{} 1".format(need))

    add(fd, ["", "#endif // {}".format(guard)])

def open_and_format(filename):
    """Open a file for writing through clang-format."""
    return os.popen("clang-format > {}".format(filename), "w")

def gen_files(config, pok_root):
    arch = option_value(config, "target.arch")
    bsp = option_value(config, "target.bsp")
    with open("Makefile", "w") as fd:
        gen_main_makefile(fd, config, arch, bsp, pok_root)
    try: os.mkdir("kernel", 0o755)
    except FileExistsError: pass
    with open("kernel/Makefile", "w") as fd:
        gen_kernel_makefile(fd, config, arch, bsp, pok_root)
    with open_and_format("kernel/deployment.h") as fd:
        gen_kernel_deployment_h(fd, config)
    for partition in option_value(config, "partitions"):
        name = option_value(partition, "name")
        try: os.mkdir(name)
        except FileExistsError: pass
        with open("{}/Makefile".format(name), "w") as fd:
            gen_partition_makefile(fd, partition, arch, bsp, pok_root)
        with open_and_format("{}/deployment.h".format(name)) as fd:
            gen_partition_deployment_h(fd, partition)

def pok_root():
    pok_root = ".."
    while not os.path.exists(os.path.join(pok_root, "libpok")):
        pok_root = os.path.join("..", pok_root)
    return pok_root

def main():
    if sys.argv[1] == "--test":
        import doctest
        doctest.testmod()
        return
    config = yaml.safe_load(open(sys.argv[1]))
    gen_files(config, pok_root())

if __name__ == '__main__':
    main()
